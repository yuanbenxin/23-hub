name: Generate Images JSON

on:
  push:
    paths:
      - 'images/**'
    branches: [ main, master ]
  workflow_dispatch:

# 必要权限配置
permissions:
  contents: write
  pull-requests: write

jobs:
  generate-images-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate images.json
        id: generate
        run: |
          # 创建临时目录
          mkdir -p temp
          
          # 查找所有支持的图片格式
          find images -type f \( \
            -iname "*.jpg" -o \
            -iname "*.jpeg" -o \
            -iname "*.png" -o \
            -iname "*.webp" -o \
            -iname "*.gif" \
          \) 2>/dev/null | sort > temp/image_paths.txt
          
          # 生成有效的 JSON 数组
          echo "[" > temp/new_images.json
          while IFS= read -r file; do
            # 转义特殊字符
            json_path=$(echo "$file" | sed 's/"/\\"/g')
            echo "\"$json_path\"," >> temp/new_images.json
          done < temp/image_paths.txt
          
          # 移除最后一个逗号并关闭数组
          if [ $(wc -l < temp/new_images.json) -gt 1 ]; then
            sed '$ s/,$//' temp/new_images.json > temp/final_images.json
            mv temp/final_images.json temp/new_images.json
          fi
          echo "]" >> temp/new_images.json
          
          # 复制到仓库根目录
          cp temp/new_images.json images.json
          
          # 验证 JSON 格式
          if ! jq empty images.json; then
            echo "❌ images.json 格式无效"
            cat images.json
            exit 1
          fi
          
          # 计算图片数量
          IMAGE_COUNT=$(cat images.json | jq '. | length')
          echo "Found $IMAGE_COUNT images" >> $GITHUB_STEP_SUMMARY
          echo "images_count=$IMAGE_COUNT" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        id: commit
        if: steps.generate.outputs.images_count != '0'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 检查是否有更改
          if git diff --quiet images.json; then
            echo "No changes to images.json" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          
          # 提交更改
          git add images.json
          git commit -m "🤖 Auto-update images.json [skip ci]"
          
          # 推送到仓库
          git push "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" \
            ${{ github.head_ref || github.ref }}
          
          echo "✅ Updated images.json with $(cat images.json | jq '. | length') images" >> $GITHUB_STEP_SUMMARY

      - name: Show summary
        if: always()
        run: |
          echo "## Images JSON Generator" >> $GITHUB_STEP_SUMMARY
          echo "- Images found: ${{ steps.generate.outputs.images_count || 0 }}" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
